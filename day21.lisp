(defpackage :day21
  (:use :cl :aoc-misc :iterate)
  (:export main)
  (:import-from :cl-ppcre :split)
  (:import-from :serapeum :nlet)
  (:import-from :trivia :match))

(in-package :day21)

(defun decode (line)
  (match (split " " line)
    ((list "swap" "position" x _ _ y)
     (list 'SWAPPOS (parse-integer x) (parse-integer y)))
    ((list "swap" "letter" x _ _ y)
     (list 'SWAPLET (char x 0) (char y 0)))
    ((list "rotate" "based" _ _ _ _ x)
     (list 'ROTBASED (char x 0)))
    ((list "rotate" dir x _)
     (list 'ROTLR (intern dir "KEYWORD") (parse-integer x)))
    ((list "reverse" _ x _ y)
     (list 'REVERSE (parse-integer x) (parse-integer y)))
    ((list "move" _ x _ _ y)
     (list 'MOVE (parse-integer x) (parse-integer y)))))

(defun rotate-right (str x)
  (let ((len (length str)))
    (iter (for _ below x)
      (let ((tmp (char str (1- len))))
        (iter (for i from (1- len) downto 1)
          (setf (char str i) (char str (1- i))))
        (setf (char str 0) tmp)))))

(defun scramble (lst str)
  (let ((len (length str)))
    (when lst
      (match (car lst)
        ((list 'SWAPPOS x y)
         (let ((tmp (char str x)))
           (setf (char str x) (char str y))
           (setf (char str y) tmp)))
        ((list 'SWAPLET x y)
         (iter (for i below len)
           (cond
             ((char= x (char str i)) (setf (char str i) y))
             ((char= y (char str i)) (setf (char str i) x)))))
        ((list 'ROTLR :|right| x)
         (rotate-right str x))
        ((list 'ROTLR :|left| x)
         (iter (for _ below x)
           (let ((tmp (char str 0)))
             (iter (for i from 0 below (1- len))
               (setf (char str i) (char str (1+ i))))
             (setf (char str (1- len)) tmp)) ))
        ((list 'ROTBASED x)
         (iter (for i below len)
           (until (char= x (char str i)))
           (finally (rotate-right str (1+ (if (>= i 4) (1+ i) i))))))
        ((list 'REVERSE x y)
         (nlet rec ((a x) (b y))
           (when (< a b)
             (let ((tmp (char str a)))
               (setf (char str a) (char str b))
               (setf (char str b) tmp))
             (rec (1+ a) (1- b)))))
        ((list 'MOVE x y)
         (if (< x y)
           (let ((tmp (char str x)))
             (iter (for i from x below y)
               (setf (char str i) (char str (1+ i))))
             (setf (char str y) tmp))
           (let ((tmp (char str x)))
             (iter (for i from x downto (1+ y))
               (setf (char str i) (char str (1- i))))
             (setf (char str y) tmp)))))
      (scramble (cdr lst) str))))

(defun main ()
  (let
    ((input (read-input-as-list 21 #'decode)))
    (let ((str "abcdefgh"))
      (scramble input str)
      (format t "~a" str))))

